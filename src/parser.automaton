State 0:
main' -> . main [ # ]
-- On MIXOP shift to state 1
-- On LOCALSYMDEF shift to state 41
-- On IDENT shift to state 46
-- On ASSOP shift to state 42
-- On ALFOP shift to state 44
-- On separated_nonempty_list(EINSTR,line) shift to state 48
-- On main shift to state 49
-- On loption(separated_nonempty_list(EINSTR,line)) shift to state 50
-- On line shift to state 51
-- On instrs shift to state 55
-- On instr shift to state 54
-- On EOF reduce production loption(separated_nonempty_list(EINSTR,line)) -> 

State 1:
instr -> MIXOP . apart ipart fpart [ EOF EINSTR ]
-- On PLUS shift to state 2
-- On MINUS shift to state 8
-- On LOCALSYMFORWARD shift to state 10
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On EQUAL shift to state 11
-- On ASTERISK shift to state 6
-- On expr shift to state 35
-- On apart shift to state 36
-- On aexpr shift to state 31
-- On LPAR reduce production apart -> 
-- On EOF reduce production apart -> 
-- On EINSTR reduce production apart -> 
-- On COMMA reduce production apart -> 

State 2:
expr -> PLUS . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 7

State 3:
aexpr -> LOCALSYMBEFORE . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production aexpr -> LOCALSYMBEFORE 
-- On PLUS reduce production aexpr -> LOCALSYMBEFORE 
-- On MUL reduce production aexpr -> LOCALSYMBEFORE 
-- On MINUS reduce production aexpr -> LOCALSYMBEFORE 
-- On LPAR reduce production aexpr -> LOCALSYMBEFORE 
-- On FSPEC reduce production aexpr -> LOCALSYMBEFORE 
-- On EQUAL reduce production aexpr -> LOCALSYMBEFORE 
-- On EOF reduce production aexpr -> LOCALSYMBEFORE 
-- On EINSTR reduce production aexpr -> LOCALSYMBEFORE 
-- On DIVP reduce production aexpr -> LOCALSYMBEFORE 
-- On DIV reduce production aexpr -> LOCALSYMBEFORE 
-- On COMMA reduce production aexpr -> LOCALSYMBEFORE 

State 4:
aexpr -> INT . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production aexpr -> INT 
-- On PLUS reduce production aexpr -> INT 
-- On MUL reduce production aexpr -> INT 
-- On MINUS reduce production aexpr -> INT 
-- On LPAR reduce production aexpr -> INT 
-- On FSPEC reduce production aexpr -> INT 
-- On EQUAL reduce production aexpr -> INT 
-- On EOF reduce production aexpr -> INT 
-- On EINSTR reduce production aexpr -> INT 
-- On DIVP reduce production aexpr -> INT 
-- On DIV reduce production aexpr -> INT 
-- On COMMA reduce production aexpr -> INT 

State 5:
aexpr -> IDENT . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production aexpr -> IDENT 
-- On PLUS reduce production aexpr -> IDENT 
-- On MUL reduce production aexpr -> IDENT 
-- On MINUS reduce production aexpr -> IDENT 
-- On LPAR reduce production aexpr -> IDENT 
-- On FSPEC reduce production aexpr -> IDENT 
-- On EQUAL reduce production aexpr -> IDENT 
-- On EOF reduce production aexpr -> IDENT 
-- On EINSTR reduce production aexpr -> IDENT 
-- On DIVP reduce production aexpr -> IDENT 
-- On DIV reduce production aexpr -> IDENT 
-- On COMMA reduce production aexpr -> IDENT 

State 6:
aexpr -> ASTERISK . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production aexpr -> ASTERISK 
-- On PLUS reduce production aexpr -> ASTERISK 
-- On MUL reduce production aexpr -> ASTERISK 
-- On MINUS reduce production aexpr -> ASTERISK 
-- On LPAR reduce production aexpr -> ASTERISK 
-- On FSPEC reduce production aexpr -> ASTERISK 
-- On EQUAL reduce production aexpr -> ASTERISK 
-- On EOF reduce production aexpr -> ASTERISK 
-- On EINSTR reduce production aexpr -> ASTERISK 
-- On DIVP reduce production aexpr -> ASTERISK 
-- On DIV reduce production aexpr -> ASTERISK 
-- On COMMA reduce production aexpr -> ASTERISK 

State 7:
expr -> PLUS aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> PLUS aexpr 
-- On PLUS reduce production expr -> PLUS aexpr 
-- On MUL reduce production expr -> PLUS aexpr 
-- On MINUS reduce production expr -> PLUS aexpr 
-- On LPAR reduce production expr -> PLUS aexpr 
-- On FSPEC reduce production expr -> PLUS aexpr 
-- On EQUAL reduce production expr -> PLUS aexpr 
-- On EOF reduce production expr -> PLUS aexpr 
-- On EINSTR reduce production expr -> PLUS aexpr 
-- On DIVP reduce production expr -> PLUS aexpr 
-- On DIV reduce production expr -> PLUS aexpr 
-- On COMMA reduce production expr -> PLUS aexpr 

State 8:
expr -> MINUS . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 9

State 9:
expr -> MINUS aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> MINUS aexpr 
-- On PLUS reduce production expr -> MINUS aexpr 
-- On MUL reduce production expr -> MINUS aexpr 
-- On MINUS reduce production expr -> MINUS aexpr 
-- On LPAR reduce production expr -> MINUS aexpr 
-- On FSPEC reduce production expr -> MINUS aexpr 
-- On EQUAL reduce production expr -> MINUS aexpr 
-- On EOF reduce production expr -> MINUS aexpr 
-- On EINSTR reduce production expr -> MINUS aexpr 
-- On DIVP reduce production expr -> MINUS aexpr 
-- On DIV reduce production expr -> MINUS aexpr 
-- On COMMA reduce production expr -> MINUS aexpr 

State 10:
apart -> LOCALSYMFORWARD . [ LPAR EOF EINSTR COMMA ]
-- On LPAR reduce production apart -> LOCALSYMFORWARD 
-- On EOF reduce production apart -> LOCALSYMFORWARD 
-- On EINSTR reduce production apart -> LOCALSYMFORWARD 
-- On COMMA reduce production apart -> LOCALSYMFORWARD 

State 11:
apart -> EQUAL . wpart EQUAL [ LPAR EOF EINSTR COMMA ]
-- On PLUS shift to state 2
-- On MINUS shift to state 8
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On wpart shift to state 12
-- On expr shift to state 15
-- On awpart shift to state 34
-- On aexpr shift to state 31

State 12:
apart -> EQUAL wpart . EQUAL [ LPAR EOF EINSTR COMMA ]
wpart -> wpart . COMMA awpart [ EQUAL COMMA ]
-- On EQUAL shift to state 13
-- On COMMA shift to state 14

State 13:
apart -> EQUAL wpart EQUAL . [ LPAR EOF EINSTR COMMA ]
-- On LPAR reduce production apart -> EQUAL wpart EQUAL 
-- On EOF reduce production apart -> EQUAL wpart EQUAL 
-- On EINSTR reduce production apart -> EQUAL wpart EQUAL 
-- On COMMA reduce production apart -> EQUAL wpart EQUAL 

State 14:
wpart -> wpart COMMA . awpart [ EQUAL EOF EINSTR COMMA ]
-- On PLUS shift to state 2
-- On MINUS shift to state 8
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On expr shift to state 15
-- On awpart shift to state 33
-- On aexpr shift to state 31

State 15:
awpart -> expr . fpart [ EQUAL EOF EINSTR COMMA ]
expr -> expr . PLUS aexpr [ PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
expr -> expr . MINUS aexpr [ PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
expr -> expr . MUL aexpr [ PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
expr -> expr . DIV aexpr [ PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
expr -> expr . DIVP aexpr [ PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
expr -> expr . FSPEC aexpr [ PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On PLUS shift to state 16
-- On MUL shift to state 18
-- On MINUS shift to state 20
-- On LPAR shift to state 22
-- On FSPEC shift to state 25
-- On DIVP shift to state 27
-- On DIV shift to state 29
-- On fpart shift to state 32
-- On EQUAL reduce production fpart -> 
-- On EOF reduce production fpart -> 
-- On EINSTR reduce production fpart -> 
-- On COMMA reduce production fpart -> 

State 16:
expr -> expr PLUS . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 17

State 17:
expr -> expr PLUS aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> expr PLUS aexpr 
-- On PLUS reduce production expr -> expr PLUS aexpr 
-- On MUL reduce production expr -> expr PLUS aexpr 
-- On MINUS reduce production expr -> expr PLUS aexpr 
-- On LPAR reduce production expr -> expr PLUS aexpr 
-- On FSPEC reduce production expr -> expr PLUS aexpr 
-- On EQUAL reduce production expr -> expr PLUS aexpr 
-- On EOF reduce production expr -> expr PLUS aexpr 
-- On EINSTR reduce production expr -> expr PLUS aexpr 
-- On DIVP reduce production expr -> expr PLUS aexpr 
-- On DIV reduce production expr -> expr PLUS aexpr 
-- On COMMA reduce production expr -> expr PLUS aexpr 

State 18:
expr -> expr MUL . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 19

State 19:
expr -> expr MUL aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> expr MUL aexpr 
-- On PLUS reduce production expr -> expr MUL aexpr 
-- On MUL reduce production expr -> expr MUL aexpr 
-- On MINUS reduce production expr -> expr MUL aexpr 
-- On LPAR reduce production expr -> expr MUL aexpr 
-- On FSPEC reduce production expr -> expr MUL aexpr 
-- On EQUAL reduce production expr -> expr MUL aexpr 
-- On EOF reduce production expr -> expr MUL aexpr 
-- On EINSTR reduce production expr -> expr MUL aexpr 
-- On DIVP reduce production expr -> expr MUL aexpr 
-- On DIV reduce production expr -> expr MUL aexpr 
-- On COMMA reduce production expr -> expr MUL aexpr 

State 20:
expr -> expr MINUS . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 21

State 21:
expr -> expr MINUS aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> expr MINUS aexpr 
-- On PLUS reduce production expr -> expr MINUS aexpr 
-- On MUL reduce production expr -> expr MINUS aexpr 
-- On MINUS reduce production expr -> expr MINUS aexpr 
-- On LPAR reduce production expr -> expr MINUS aexpr 
-- On FSPEC reduce production expr -> expr MINUS aexpr 
-- On EQUAL reduce production expr -> expr MINUS aexpr 
-- On EOF reduce production expr -> expr MINUS aexpr 
-- On EINSTR reduce production expr -> expr MINUS aexpr 
-- On DIVP reduce production expr -> expr MINUS aexpr 
-- On DIV reduce production expr -> expr MINUS aexpr 
-- On COMMA reduce production expr -> expr MINUS aexpr 

State 22:
fpart -> LPAR . expr RPAR [ EQUAL EOF EINSTR COMMA ]
-- On PLUS shift to state 2
-- On MINUS shift to state 8
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On expr shift to state 23
-- On aexpr shift to state 31

State 23:
expr -> expr . PLUS aexpr [ RPAR PLUS MUL MINUS FSPEC DIVP DIV ]
expr -> expr . MINUS aexpr [ RPAR PLUS MUL MINUS FSPEC DIVP DIV ]
expr -> expr . MUL aexpr [ RPAR PLUS MUL MINUS FSPEC DIVP DIV ]
expr -> expr . DIV aexpr [ RPAR PLUS MUL MINUS FSPEC DIVP DIV ]
expr -> expr . DIVP aexpr [ RPAR PLUS MUL MINUS FSPEC DIVP DIV ]
expr -> expr . FSPEC aexpr [ RPAR PLUS MUL MINUS FSPEC DIVP DIV ]
fpart -> LPAR expr . RPAR [ EQUAL EOF EINSTR COMMA ]
-- On RPAR shift to state 24
-- On PLUS shift to state 16
-- On MUL shift to state 18
-- On MINUS shift to state 20
-- On FSPEC shift to state 25
-- On DIVP shift to state 27
-- On DIV shift to state 29

State 24:
fpart -> LPAR expr RPAR . [ EQUAL EOF EINSTR COMMA ]
-- On EQUAL reduce production fpart -> LPAR expr RPAR 
-- On EOF reduce production fpart -> LPAR expr RPAR 
-- On EINSTR reduce production fpart -> LPAR expr RPAR 
-- On COMMA reduce production fpart -> LPAR expr RPAR 

State 25:
expr -> expr FSPEC . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 26

State 26:
expr -> expr FSPEC aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> expr FSPEC aexpr 
-- On PLUS reduce production expr -> expr FSPEC aexpr 
-- On MUL reduce production expr -> expr FSPEC aexpr 
-- On MINUS reduce production expr -> expr FSPEC aexpr 
-- On LPAR reduce production expr -> expr FSPEC aexpr 
-- On FSPEC reduce production expr -> expr FSPEC aexpr 
-- On EQUAL reduce production expr -> expr FSPEC aexpr 
-- On EOF reduce production expr -> expr FSPEC aexpr 
-- On EINSTR reduce production expr -> expr FSPEC aexpr 
-- On DIVP reduce production expr -> expr FSPEC aexpr 
-- On DIV reduce production expr -> expr FSPEC aexpr 
-- On COMMA reduce production expr -> expr FSPEC aexpr 

State 27:
expr -> expr DIVP . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 28

State 28:
expr -> expr DIVP aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> expr DIVP aexpr 
-- On PLUS reduce production expr -> expr DIVP aexpr 
-- On MUL reduce production expr -> expr DIVP aexpr 
-- On MINUS reduce production expr -> expr DIVP aexpr 
-- On LPAR reduce production expr -> expr DIVP aexpr 
-- On FSPEC reduce production expr -> expr DIVP aexpr 
-- On EQUAL reduce production expr -> expr DIVP aexpr 
-- On EOF reduce production expr -> expr DIVP aexpr 
-- On EINSTR reduce production expr -> expr DIVP aexpr 
-- On DIVP reduce production expr -> expr DIVP aexpr 
-- On DIV reduce production expr -> expr DIVP aexpr 
-- On COMMA reduce production expr -> expr DIVP aexpr 

State 29:
expr -> expr DIV . aexpr [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On aexpr shift to state 30

State 30:
expr -> expr DIV aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> expr DIV aexpr 
-- On PLUS reduce production expr -> expr DIV aexpr 
-- On MUL reduce production expr -> expr DIV aexpr 
-- On MINUS reduce production expr -> expr DIV aexpr 
-- On LPAR reduce production expr -> expr DIV aexpr 
-- On FSPEC reduce production expr -> expr DIV aexpr 
-- On EQUAL reduce production expr -> expr DIV aexpr 
-- On EOF reduce production expr -> expr DIV aexpr 
-- On EINSTR reduce production expr -> expr DIV aexpr 
-- On DIVP reduce production expr -> expr DIV aexpr 
-- On DIV reduce production expr -> expr DIV aexpr 
-- On COMMA reduce production expr -> expr DIV aexpr 

State 31:
expr -> aexpr . [ RPAR PLUS MUL MINUS LPAR FSPEC EQUAL EOF EINSTR DIVP DIV COMMA ]
-- On RPAR reduce production expr -> aexpr 
-- On PLUS reduce production expr -> aexpr 
-- On MUL reduce production expr -> aexpr 
-- On MINUS reduce production expr -> aexpr 
-- On LPAR reduce production expr -> aexpr 
-- On FSPEC reduce production expr -> aexpr 
-- On EQUAL reduce production expr -> aexpr 
-- On EOF reduce production expr -> aexpr 
-- On EINSTR reduce production expr -> aexpr 
-- On DIVP reduce production expr -> aexpr 
-- On DIV reduce production expr -> aexpr 
-- On COMMA reduce production expr -> aexpr 

State 32:
awpart -> expr fpart . [ EQUAL EOF EINSTR COMMA ]
-- On EQUAL reduce production awpart -> expr fpart 
-- On EOF reduce production awpart -> expr fpart 
-- On EINSTR reduce production awpart -> expr fpart 
-- On COMMA reduce production awpart -> expr fpart 

State 33:
wpart -> wpart COMMA awpart . [ EQUAL EOF EINSTR COMMA ]
-- On EQUAL reduce production wpart -> wpart COMMA awpart 
-- On EOF reduce production wpart -> wpart COMMA awpart 
-- On EINSTR reduce production wpart -> wpart COMMA awpart 
-- On COMMA reduce production wpart -> wpart COMMA awpart 

State 34:
wpart -> awpart . [ EQUAL EOF EINSTR COMMA ]
-- On EQUAL reduce production wpart -> awpart 
-- On EOF reduce production wpart -> awpart 
-- On EINSTR reduce production wpart -> awpart 
-- On COMMA reduce production wpart -> awpart 

State 35:
apart -> expr . [ LPAR EOF EINSTR COMMA ]
expr -> expr . PLUS aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV COMMA ]
expr -> expr . MINUS aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV COMMA ]
expr -> expr . MUL aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV COMMA ]
expr -> expr . DIV aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV COMMA ]
expr -> expr . DIVP aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV COMMA ]
expr -> expr . FSPEC aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV COMMA ]
-- On PLUS shift to state 16
-- On MUL shift to state 18
-- On MINUS shift to state 20
-- On FSPEC shift to state 25
-- On DIVP shift to state 27
-- On DIV shift to state 29
-- On LPAR reduce production apart -> expr 
-- On EOF reduce production apart -> expr 
-- On EINSTR reduce production apart -> expr 
-- On COMMA reduce production apart -> expr 

State 36:
instr -> MIXOP apart . ipart fpart [ EOF EINSTR ]
-- On COMMA shift to state 37
-- On ipart shift to state 39
-- On LPAR reduce production ipart -> 
-- On EOF reduce production ipart -> 
-- On EINSTR reduce production ipart -> 

State 37:
ipart -> COMMA . expr [ LPAR EOF EINSTR ]
-- On PLUS shift to state 2
-- On MINUS shift to state 8
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On expr shift to state 38
-- On aexpr shift to state 31

State 38:
expr -> expr . PLUS aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV ]
expr -> expr . MINUS aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV ]
expr -> expr . MUL aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV ]
expr -> expr . DIV aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV ]
expr -> expr . DIVP aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV ]
expr -> expr . FSPEC aexpr [ PLUS MUL MINUS LPAR FSPEC EOF EINSTR DIVP DIV ]
ipart -> COMMA expr . [ LPAR EOF EINSTR ]
-- On PLUS shift to state 16
-- On MUL shift to state 18
-- On MINUS shift to state 20
-- On FSPEC shift to state 25
-- On DIVP shift to state 27
-- On DIV shift to state 29
-- On LPAR reduce production ipart -> COMMA expr 
-- On EOF reduce production ipart -> COMMA expr 
-- On EINSTR reduce production ipart -> COMMA expr 

State 39:
instr -> MIXOP apart ipart . fpart [ EOF EINSTR ]
-- On LPAR shift to state 22
-- On fpart shift to state 40
-- On EOF reduce production fpart -> 
-- On EINSTR reduce production fpart -> 

State 40:
instr -> MIXOP apart ipart fpart . [ EOF EINSTR ]
-- On EOF reduce production instr -> MIXOP apart ipart fpart 
-- On EINSTR reduce production instr -> MIXOP apart ipart fpart 

State 41:
line -> LOCALSYMDEF . instr [ EOF EINSTR ]
-- On MIXOP shift to state 1
-- On ASSOP shift to state 42
-- On ALFOP shift to state 44
-- On instr shift to state 45

State 42:
instr -> ASSOP . wpart [ EOF EINSTR ]
-- On PLUS shift to state 2
-- On MINUS shift to state 8
-- On LOCALSYMBEFORE shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On ASTERISK shift to state 6
-- On wpart shift to state 43
-- On expr shift to state 15
-- On awpart shift to state 34
-- On aexpr shift to state 31

State 43:
instr -> ASSOP wpart . [ EOF EINSTR ]
wpart -> wpart . COMMA awpart [ EOF EINSTR COMMA ]
-- On COMMA shift to state 14
-- On EOF reduce production instr -> ASSOP wpart 
-- On EINSTR reduce production instr -> ASSOP wpart 

State 44:
instr -> ALFOP . [ EOF EINSTR ]
-- On EOF reduce production instr -> ALFOP 
-- On EINSTR reduce production instr -> ALFOP 

State 45:
line -> LOCALSYMDEF instr . [ EOF EINSTR ]
-- On EOF reduce production line -> LOCALSYMDEF instr 
-- On EINSTR reduce production line -> LOCALSYMDEF instr 

State 46:
line -> IDENT . instr [ EOF EINSTR ]
-- On MIXOP shift to state 1
-- On ASSOP shift to state 42
-- On ALFOP shift to state 44
-- On instr shift to state 47

State 47:
line -> IDENT instr . [ EOF EINSTR ]
-- On EOF reduce production line -> IDENT instr 
-- On EINSTR reduce production line -> IDENT instr 

State 48:
loption(separated_nonempty_list(EINSTR,line)) -> separated_nonempty_list(EINSTR,line) . [ EOF ]
-- On EOF reduce production loption(separated_nonempty_list(EINSTR,line)) -> separated_nonempty_list(EINSTR,line) 

State 49:
main' -> main . [ # ]
-- On # accept main

State 50:
instrs -> loption(separated_nonempty_list(EINSTR,line)) . [ EOF ]
-- On EOF reduce production instrs -> loption(separated_nonempty_list(EINSTR,line)) 

State 51:
separated_nonempty_list(EINSTR,line) -> line . [ EOF ]
separated_nonempty_list(EINSTR,line) -> line . EINSTR separated_nonempty_list(EINSTR,line) [ EOF ]
-- On EINSTR shift to state 52
-- On EOF reduce production separated_nonempty_list(EINSTR,line) -> line 

State 52:
separated_nonempty_list(EINSTR,line) -> line EINSTR . separated_nonempty_list(EINSTR,line) [ EOF ]
-- On MIXOP shift to state 1
-- On LOCALSYMDEF shift to state 41
-- On IDENT shift to state 46
-- On ASSOP shift to state 42
-- On ALFOP shift to state 44
-- On separated_nonempty_list(EINSTR,line) shift to state 53
-- On line shift to state 51
-- On instr shift to state 54

State 53:
separated_nonempty_list(EINSTR,line) -> line EINSTR separated_nonempty_list(EINSTR,line) . [ EOF ]
-- On EOF reduce production separated_nonempty_list(EINSTR,line) -> line EINSTR separated_nonempty_list(EINSTR,line) 

State 54:
line -> instr . [ EOF EINSTR ]
-- On EOF reduce production line -> instr 
-- On EINSTR reduce production line -> instr 

State 55:
main -> instrs . EOF [ # ]
-- On EOF shift to state 56

State 56:
main -> instrs EOF . [ # ]
-- On # reduce production main -> instrs EOF 

